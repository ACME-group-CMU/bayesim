TO DO LIST FOR BAYESIM
----------------------

[* for necessary for paper, ~ for need to decide if it's necessary, - for future ideas]

* update save_state and load_state

* more 'verbose' options

* add functions to set parameter units

* fully updated documentation

* change model.attach_params to call attach_ecs and attach_fit_params

* add more options to CL interface (e.g. invoking comparison plot/visualize_grid, other tweaks to behavior)

* fix log spacing on visualize() in CL version

* some more sanity checks and error messages in pmf.populate_dense_grid

* more examples - TIDLS, maybe PC1D, maybe non-ideal diode, etc.

* fix save_step behavior in light of new run() protocol

* check 2.7 vs. 3.6 compatibility


~ speed up visualize_grid somehow (parallelize?)

~ save model function somehow to at least theoretically close loop within CL interface

~ improve defaults in visualizations - both comparison_plot and probs (axis ticks overlapping sometimes, etc.)

~ include all options in argparser for command line

~ change project_2D to use grid also (also maybe pass patch parameters rather than actual patch objects?) NOTE: tried this and it seemed to get slower, at least up to the scale I tried (~1000 grid points)

~ maybe do project_2D with imshow()?

~ be able to ignore extra points in model data file

~ plotting points from an inference run?

~ figure out if list_model_pts_to_run can be made faster

~ for big data sets, save_state might need to write separate HDF5 files and store paths to them in the state file

~ make default value of th_pv dimension-number-dependent

~ option to give Python object (DataFrame) to attach_observations rather than only a file

~ play with code profiling to speed up slow steps (e.g. calc_model_gradients)


- allow multiple output variables

- making animation of PMF evolving during a run

- hierarchical indexing to save space rather than everything written out in every row

- alternative error models (e.g. lognormal as well as normal)

- allow arbitrary parameter space sampling (e.g. user-provided points) in Pmf? Then regions could be defined by a Voronoi tessellation rather than hyper-rectangular-prisms or whatever
